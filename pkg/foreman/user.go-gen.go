// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package foreman

import (
	"context"
	"fmt"
	"net/http"
	"strconv"
	"strings"
)

var UserEndpointPrefix = fmt.Sprintf("%ss", strings.ToLower("User"))

type QueryResponseUser struct {
	QueryResponse
	Results []User `json:"results"`
}

func (c *Client) GetUser(ctx context.Context, idOrName string) (*User, error) {
	if id, err := strconv.Atoi(idOrName); err == nil {
		return c.GetUserByID(ctx, int(id))
	}
	return c.GetUserByName(ctx, idOrName)
}

func (c *Client) GetUserByID(ctx context.Context, id int) (*User, error) {
	response := new(User)
	err := c.requestHelper(ctx, fmt.Sprintf("/%s/%d", UserEndpointPrefix, id), http.MethodGet, nil, response)
	return response, err
}

func (c *Client) GetUserByName(ctx context.Context, name string) (*User, error) {
	response := new(QueryResponseUser)
	err := c.requestSearchHelper(ctx, fmt.Sprintf("/%s", UserEndpointPrefix), http.MethodGet, "name", name, nil, response)
	if err != nil {
		return nil, err
	}
	if len(response.Results) == 0 {
		return nil, fmt.Errorf("User not found: %s", name)

	}
	return &response.Results[0], err
}

func (c *Client) ListUser(ctx context.Context) (*QueryResponseUser, error) {
	response := new(QueryResponseUser)
	err := c.requestHelper(ctx, fmt.Sprintf("/%s", UserEndpointPrefix), http.MethodGet, nil, response)
	return response, err
}

func (c *Client) CreateUser(ctx context.Context, createRequest interface{}) (*User, error) {
	response := new(User)
	err := c.requestHelper(ctx, fmt.Sprintf("/%s", UserEndpointPrefix), http.MethodPost, createRequest, response)
	return response, err
}

func (c *Client) DeleteUser(ctx context.Context, id int) error {
	return c.requestHelper(ctx, fmt.Sprintf("/%s/%d", UserEndpointPrefix, id), http.MethodDelete, nil, nil)
}
